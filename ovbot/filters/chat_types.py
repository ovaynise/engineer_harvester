from functools import wraps
from typing import Callable
from aiogram.types import Message
from aiogram import Router, types
from aiogram.filters import Command, Filter
from config import logger_bot
from utils.security import crypt
from utils.user_utils import get_user_level
from aiogram import Bot



def log_filter_result(
    command: str,
    username: str,
    user_firstname: str,
    chat_title: str,
    chat_type: str,
    filter_name: str,
    result: bool,
    user_level: int = None,
):
    status = "üü°" if result else "üî¥"
    user_info = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_firstname}) –≤ —á–∞—Ç–µ "
        f"{chat_title} ({chat_type})."
    )
    level_info = (
        f" –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_level}."
        if user_level is not None
        else ""
    )
    logger_bot.debug(
        f'{status}–ö–æ–º–∞–Ω–¥–∞ "/{command}": –§–∏–ª—å—Ç—Ä {filter_name}: '
        f'–¥–æ—Å—Ç—É–ø {"—Ä–∞–∑—Ä–µ—à–µ–Ω" if result else "–∑–∞–ø—Ä–µ—â–µ–Ω"}.\n'
        f"{user_info}{level_info}"
    )


def security_filters(router: Router, command: str = None, *filters: Filter):
    def decorator(handler: Callable):
        @wraps(handler)
        async def wrapper(message: types.Message):
            username = message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            user_firstname = message.from_user.first_name
            chat_title = message.chat.title or f"–ª–∏—á–Ω—ã–π —á–∞—Ç ({message.chat.id})"
            user_id = message.from_user.id

            # –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —á–∞—Ç–∞ –∏ –∫–æ–º–∞–Ω–¥—ã
            print(f"Processing command: /{command or '–°–æ–æ–±—â–µ–Ω–∏–µ'} in chat type: {message.chat.type}")

            for filter_ in filters:
                if not await filter_(
                    message,
                    command,
                    username,
                    user_id,
                    user_firstname,
                    chat_title,
                ):
                    return  # –§–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –≤—ã—Ö–æ–¥

            logger_bot.debug(f"üü¢ –§–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            return await handler(message)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
        if command:
            router.message.register(wrapper, Command(command))
        else:
            router.message.register(wrapper)

        return handler

    return decorator


class ChatTypesFilter(Filter):
    def __init__(self, chat_types: list[str]) -> None:
        self.chat_types = chat_types

    async def __call__(
            self,
            message: types.Message,
            command: str = None,
            username: str = "",
            user_id: int = 0,
            user_firstname: str = "",
            chat_title: str = "",
    ) -> bool:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–∏–ø–∞ —á–∞—Ç–∞
        logger_bot.info(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞: {message.chat.type} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /{command or '–°–æ–æ–±—â–µ–Ω–∏–µ'}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º
        result = message.chat.type in self.chat_types
        if not result:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            await message.answer(
                f"–ö–æ–º–∞–Ω–¥–∞ /{command or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'} –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ "
                f"—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–∞—Ö —á–∞—Ç–æ–≤: {', '.join(self.chat_types)}."
            )
        log_filter_result(
            command or "–°–æ–æ–±—â–µ–Ω–∏–µ",
            username,
            user_firstname,
            chat_title,
            message.chat.type,
            "ChatTypesFilter",
            result,
        )
        return result


class UserLevelFilter(Filter):
    def __init__(
        self, min_level: int, max_level: int, filter_name: str
    ) -> None:
        self.min_level = min_level
        self.max_level = max_level
        self.filter_name = filter_name

    async def __call__(
        self,
        message: types.Message,
        command: str,
        username: str,
        user_id: int,
        user_firstname: str,
        chat_title: str,
    ) -> bool:
        user_level = await get_user_level(crypt(user_id))
        result = (
            user_level is not None
            and self.min_level <= user_level <= self.max_level
        )
        if not result:
            if user_level is None:
                await message.answer(
                    f"–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /{command} "
                    f"–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. "
                    f"–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
            else:
                await message.answer(
                    f"–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /{command} "
                    f"–Ω–µ–æ–±—Ö–æ–¥–∏–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ "
                    f"–æ—Ç {self.min_level} –¥–æ {self.max_level}"
                    f". –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level}."
                )
        log_filter_result(
            command,
            username,
            user_firstname,
            chat_title,
            message.chat.type,
            self.filter_name,
            result,
            user_level,
        )
        return result


class IsAnonymousUser(Filter):
    async def __call__(
        self,
        message: types.Message,
        command: str,
        username: str,
        user_id: int,
        user_firstname: str,
        chat_title: str,
    ) -> bool:
        if message.from_user.is_bot or message.from_user.id is None:
            logger_bot.debug(
                f'üü°–ö–æ–º–∞–Ω–¥–∞ "/{command}": –§–∏–ª—å—Ç—Ä '
                f"IsAnonymousUser: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–æ–Ω–∏–º–µ–Ω –∏–ª–∏ –±–æ—Ç.\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_firstname}) –≤ "
                f"—á–∞—Ç–µ {chat_title}."
            )
            await message.answer(
                f"–ö–æ–º–∞–Ω–¥–∞ /{command} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è "
                f"–∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –±–æ—Ç–æ–≤."
            )
            return False
        return True


class UserLevelRangeFilter(Filter):
    def __init__(self, min_level: int, max_level: int) -> None:
        self.min_level = min_level
        self.max_level = max_level

    async def __call__(
            self,
            message: types.Message,
            command: str,
            username: str,
            user_id: int,
            user_firstname: str,
            chat_title: str,
    ) -> bool:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è reply –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
        if not (message.reply_to_message or
                any(entity.type == "mention" and entity.extract_text(
                    message.text) == f'@{message.bot.username}' for entity in
                    message.entities)):
            return False

        user_level = await get_user_level(crypt(user_id))
        result = (
                user_level is not None
                and self.min_level <= user_level <= self.max_level
        )

        if not result:
            await message.answer(
                f"–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å "
                f"—Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {self.min_level} "
                f"–¥–æ {self.max_level}. "
                f" –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level}. "
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 15 —É—Ä–æ–≤–Ω—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å "
                f"–∫–æ–º–∞–Ω–¥–æ–π /start"
            )
        return result


class UserPrivateLevelRangeFilter(Filter):
    def __init__(self, min_level: int, max_level: int) -> None:
        self.min_level = min_level
        self.max_level = max_level

    async def __call__(
        self,
        message: types.Message,
        command: str,
        username: str,
        user_id: int,
        user_firstname: str,
        chat_title: str,
    ) -> bool:
        user_level = await get_user_level(crypt(user_id))
        result = (
            user_level is not None
            and self.min_level <= user_level <= self.max_level
        )
        if not result:
            await message.answer(
                f"–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å "
                f"—Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {self.min_level} "
                f"–¥–æ {self.max_level}. "
                f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {user_level}. "
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 15 —É—Ä–æ–≤–Ω—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å "
                f"–∫–æ–º–∞–Ω–¥–æ–π /start"
            )
        return result

class GroupChatInteractionFilter(Filter):
    def __init__(self, bot: Bot):
        self.bot = bot

    async def __call__(self, message: Message, *args, **kwargs) -> bool:
        bot_username = (await self.bot.get_me()).username

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == self.bot.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        mentions_bot = message.entities and any(
            entity.type == "mention" and
            message.text[entity.offset:entity.offset + entity.length] == f"@{bot_username}"
            for entity in message.entities
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç—É (—Ä–µ–ø–ª–∞–π –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
        return is_reply_to_bot or mentions_bot